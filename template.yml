AWSTemplateFormatVersion: "2010-09-09"
Description: BayesBet Project Cloudformation Template

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  EnvironmentType:
    Description: Environment Type of the stack; test or prod?
    Type: String
    AllowedValues:
      - prod
      - test
    Default: prod

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

Mappings:
  EnvTypeVars:
    S3BucketName:
      test: bayes-bet-test
      prod: bayes-bet-prod
    DynamoDBTableName:
      test: bayes-bet-table-test
      prod: bayes-bet-table
    EcrRepoName:
      test: bayes-bet-repo-test
      prod: bayes-bet-repo

Resources:
  # Create VPC with internet gateway connected to single public subnet for Batch
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
        Description: HTTP egress only for REST API requests
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
        Description: HTTPS egress only for REST API requests

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete
    Properties:
      BucketName: !FindInMap [EnvTypeVars, S3BucketName, !Ref EnvironmentType]
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins: 
              - "*"
            AllowedMethods: 
              - GET
            AllowedHeaders: 
              - "*"

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !FindInMap [EnvTypeVars, DynamoDBTableName, !Ref EnvironmentType]
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: League
          AttributeType: S
        - AttributeName: PredictionDate
          AttributeType: S
      KeySchema:
        - AttributeName: League
          KeyType: HASH
        - AttributeName: PredictionDate
          KeyType: RANGE

  EcrRepository:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !FindInMap [EnvTypeVars, EcrRepoName, !Ref EnvironmentType]
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} ECR Repository

  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceForEC2Role

  EcsInstanceS3BucketPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 's3:List*'
            Resource:
              - !Sub 'arn:aws:s3:::${S3Bucket}'
      Roles:
        - !Ref EcsInstanceRole

  EcsInstanceS3ObjectsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 's3:Get*'
              - 's3:Put*'
            Resource:
              - !Sub 'arn:aws:s3:::${S3Bucket}/*'
      Roles:
        - !Ref EcsInstanceRole

  EcsInstanceDynamoDbPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:List*'
              - 'dynamodb:DescribeReservedCapacity*'
              - 'dynamodb:DescribeLimits'
              - 'dynamodb:DescribeTimeToLive'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'dynamodb:BatchGet*'
              - 'dynamodb:DescribeStream'
              - 'dynamodb:DescribeTable'
              - 'dynamodb:Get*'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'dynamodb:BatchWrite*'
              - 'dynamodb:CreateTable'
              - 'dynamodb:Delete*'
              - 'dynamodb:Update*'
              - 'dynamodb:PutItem'
            Resource: !GetAtt DynamoDBTable.Arn
      Roles:
        - !Ref EcsInstanceRole

  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref EcsInstanceRole]

  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ServiceRole: !GetAtt BatchServiceRole.Arn
      ComputeEnvironmentName: !Sub ${EnvironmentName}-batch-compute-environment
      ComputeResources:
        Type: EC2
        MinvCpus: 0
        DesiredvCpus: 0
        MaxvCpus: 8
        InstanceTypes:
          - optimal
        Subnets:
          - !Ref PublicSubnet1
        SecurityGroupIds:
          - !Ref NoIngressSecurityGroup
        InstanceRole: !Ref IamInstanceProfile
      State: ENABLED

  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Sub ${EnvironmentName}-batch-job-queue
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref ComputeEnvironment
      State: ENABLED

  JobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: !Sub ${EnvironmentName}-model-update-job-def
      Type: container
      ContainerProperties:
        Image: 
          !Sub 
            - '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepoName}:latest'
            - { EcrRepoName: !FindInMap [EnvTypeVars, EcrRepoName, !Ref EnvironmentType] }
        Vcpus: 4
        Memory: 8000
        Privileged: false
        Environment:
          - Name: S3_BUCKET_NAME
            Value: !FindInMap [EnvTypeVars, S3BucketName, !Ref EnvironmentType]
          - Name: DYNAMODB_TABLE_NAME
            Value: !FindInMap [EnvTypeVars, DynamoDBTableName, !Ref EnvironmentType]

  ScheduledRuleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole

  ScheduledRuleBatchInvokePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'batch:SubmitJob'
            Resource: '*'
      Roles:
        - !Ref ScheduledRuleRole

  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Daily BayesBet Model Update"
      ScheduleExpression: "cron(0 8 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !Ref JobQueue
          RoleArn: !GetAtt ScheduledRuleRole.Arn
          BatchParameters:
            JobDefinition: !Ref JobDefinition
            JobName: bayes-bet-scheduled
            RetryStrategy:
              Attempts: 1
          Id: BAYES-BET
  
Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup

